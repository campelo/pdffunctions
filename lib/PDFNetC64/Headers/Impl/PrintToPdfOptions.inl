// This file is autogenerated: please see the codegen template "Options"
namespace pdftron{ namespace PDF{ 

inline PrintToPdfOptions::PrintToPdfOptions()
	: OptionsBase()
{
}

inline PrintToPdfOptions::~PrintToPdfOptions()
{
}


inline double PrintToPdfOptions::GetHorizontalPageMargin()
{
	SDF::Obj found = m_dict.FindObj("horizontal-page-margin");
	if(found.IsValid())
	{
		return (found.GetNumber());
	}
	return (18);
}

inline PrintToPdfOptions& PrintToPdfOptions::SetHorizontalPageMargin(double value)
{
	PDF::OptionsBase::PutNumber(m_dict, "horizontal-page-margin", (value));
	return *this;
}


inline double PrintToPdfOptions::GetPageHeight()
{
	SDF::Obj found = m_dict.FindObj("page-height");
	if(found.IsValid())
	{
		return (found.GetNumber());
	}
	return (0);
}

inline PrintToPdfOptions& PrintToPdfOptions::SetPageHeight(double value)
{
	PDF::OptionsBase::PutNumber(m_dict, "page-height", (value));
	return *this;
}


inline UString PrintToPdfOptions::GetPageOrientation()
{
	SDF::Obj found = m_dict.FindObj("page-orientation");
	if(found.IsValid())
	{
		return (found.GetAsPDFText());
	}
	return ("");
}

inline PrintToPdfOptions& PrintToPdfOptions::SetPageOrientation(const UString& value)
{
	PDF::OptionsBase::PutText(m_dict, "page-orientation", (value));
	return *this;
}


inline double PrintToPdfOptions::GetPageWidth()
{
	SDF::Obj found = m_dict.FindObj("page-width");
	if(found.IsValid())
	{
		return (found.GetNumber());
	}
	return (0);
}

inline PrintToPdfOptions& PrintToPdfOptions::SetPageWidth(double value)
{
	PDF::OptionsBase::PutNumber(m_dict, "page-width", (value));
	return *this;
}


inline double PrintToPdfOptions::GetVerticalPageMargin()
{
	SDF::Obj found = m_dict.FindObj("vertical-page-margin");
	if(found.IsValid())
	{
		return (found.GetNumber());
	}
	return (18);
}

inline PrintToPdfOptions& PrintToPdfOptions::SetVerticalPageMargin(double value)
{
	PDF::OptionsBase::PutNumber(m_dict, "vertical-page-margin", (value));
	return *this;
}


}
}
